//===------------------------------------------------------------*- C++ -*-===//
//
// Copyright 2017 Marco Minutoli <mminutoli@gmail.com>
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy
// of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.
//
//===----------------------------------------------------------------------===//

%skeleton "lalr1.cc"
%language "c++"
%debug
%defines
%locations
%define api.namespace { cpts571 }
%define parser_class_name { SequenceFileParser }


%code requires {

#include <algorithm>
#include <memory>
#include <sstream>
#include <string>
#include <deque>
#include <iostream>

namespace cpts571 {
  class SequenceFileScanner;
  class SequenceParserDriver;
}

static std::deque<std::string> currentSequenceBits;
static std::string currentSequenceName;

}

%lex-param { SequenceFileScanner & scanner }
%parse-param { SequenceFileScanner & scanner }

%lex-param { SequenceParserDriver & driver }
%parse-param { SequenceParserDriver & driver }

%code {

#include "cpts571/SequenceParserDriver.h"

static int yylex(cpts571::SequenceFileParser::semantic_type * yylval,
                 cpts571::SequenceFileParser::location_type *,
                 cpts571::SequenceFileScanner & scanner,
                 cpts571::SequenceParserDriver & driver);

}

%start sequences

%union {
  std::string * sval;
}

%token END 0
%token NL  1

%token  <sval> START_SEQUENCE
%token  <sval> WORD

%%

sequences : sequence_list END {}

sequence_list : sequence
              | sequence sequence_list {}

sequence : START_SEQUENCE sequence_name comment NL sequence_bits {
  Sequence sequence;
  sequence.Name(currentSequenceName);
  for (auto & bit : currentSequenceBits) {
    std::transform(std::begin(bit), std::end(bit), std::begin(bit), ::toupper);
    sequence.AppendChunk(std::begin(bit), std::end(bit));
  }
  driver.AddSequence(sequence);
  currentSequenceBits.clear();
}
         | START_SEQUENCE sequence_name NL sequence_bits {
  Sequence sequence;
  sequence.Name(currentSequenceName);
  for (auto & bit : currentSequenceBits) {
    std::transform(std::begin(bit), std::end(bit), std::begin(bit), ::toupper);
    sequence.AppendChunk(std::begin(bit), std::end(bit));
  }
  driver.AddSequence(sequence);
  currentSequenceBits.clear();
}

sequence_name : WORD {
  currentSequenceName = std::move(*$1);
}

sequence_bits : WORD sequence_bits {
  currentSequenceBits.push_front(std::move(*$1));
}
        | WORD NL sequence_bits {
  currentSequenceBits.push_front(std::move(*$1));
}
        | { }

comment : word_list {}

word_list : WORD | WORD word_list {}

%%

void
cpts571::SequenceFileParser::error(
    const cpts571::SequenceFileParser::location_type &l,
    const std::string &err_message) {
  std::cerr << "Error at " << l.begin << " : " << err_message << "\n";
}

#include "cpts571/SequenceFileScanner.h"

static int yylex(cpts571::SequenceFileParser::semantic_type *lval,
                 cpts571::SequenceFileParser::location_type *,
                 cpts571::SequenceFileScanner & scanner,
                 cpts571::SequenceParserDriver & driver) {
  return scanner.yylex(lval);
}
